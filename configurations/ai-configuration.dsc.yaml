# yaml-language-server: $schema=https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2024/04/bundled/config/document.vscode.json
$schema: https://aka.ms/dsc/schemas/v3/bundled/config/document.json

##########################################################################################################
# This configuration will install the tools necessary to get started developing AI Applications          #
# NOTE: Run: dsc config .\ai-configuration.dsc.yaml                                                      #
##########################################################################################################

metadata:
  Microsoft.DSC:
    securityContext: elevated

resources:
  - name: assert-windows
    type: Microsoft.DSC/Assertion
    properties:
      $schema: https://aka.ms/dsc/schemas/v3/bundled/config/document.json
      resources:
        - name: os
          type: Microsoft/OSInfo
          properties:
            family: Windows

  - name: AI Development Tools
    type: Microsoft.DSC/PowerShell
    properties:
      resources:
        - name: Ollama
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            Id: Ollama.Ollama
            source: winget
            UseLatest: true
            Ensure: Present

        - name: LMStudio
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            Id: LMStudio.LMStudio
            source: winget
            UseLatest: true
            Ensure: Present

        - name: VisualStudioCode
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            id: Microsoft.VisualStudioCode
            source: winget
            UseLatest: true
            Ensure: Present
    dependsOn:
      - "[resourceId('Microsoft.DSC/Assertion','assert-windows')]"

  - name: VisualStudioCode Extensions
    type: Microsoft.Windows/WindowsPowerShell
    properties: 
      resources:
        - name: Script to install Visual Studio Code extensions
          type: PSDesiredStateConfiguration/Script
          properties:
            GetScript: |
              # Return the currently installed VS Code extensions as a comma‚Äêseparated string.
              $installedExtensions = code --list-extensions
              return @{ Result = $installedExtensions }
            TestScript: |
              # Ignore deprecation warnings & reset PATH
              $env:NODE_OPTIONS = "--no-deprecation"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              
              $jsonPath = Join-Path $env:WinGetConfigRoot "ai-configuration-vscode-extensions.json"
              $jsonContent = Get-Content $jsonPath -Raw
              $extensions = (ConvertFrom-Json $jsonContent).extensions
              
              # Get the list of currently installed extensions.
              $installedExtensions = code --list-extensions
              
              # Check if all required extensions are installed.
              $allInstalled = $extensions | ForEach-Object { $_.name -in $installedExtensions }
              return ($allInstalled -contains $false) -eq $false
            SetScript: |
              # Ignore deprecation warnings & reset PATH
              $env:NODE_OPTIONS = "--no-deprecation"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              $jsonPath = Join-Path $env:WinGetConfigRoot "ai-configuration-vscode-extensions.json"
              $jsonContent = Get-Content $jsonPath -Raw
              $extensions = (ConvertFrom-Json $jsonContent).extensions

              # Get the list of currently installed extensions
              $installedExtensions = code --list-extensions

              # Install each extension if not already installed
              foreach ($extension in $extensions) {
                if ($installedExtensions -notcontains $extension.name) {
                  code --install-extension $extension.name
                }
              }
    dependsOn:
      - "[resourceId('Microsoft.DSC/Assertion','assert-windows')]"
      - "[resourceId('Microsoft.WinGet.DSC/WinGetPackage','VisualStudioCode')]"