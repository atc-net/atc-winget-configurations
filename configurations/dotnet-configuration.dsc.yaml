# yaml-language-server: $schema=https://raw.githubusercontent.com/PowerShell/DSC/main/schemas/2024/04/bundled/config/document.vscode.json
$schema: https://aka.ms/dsc/schemas/v3/bundled/config/document.json

##########################################################################################################
# This configuration will install the tools necessary to get started developing in dotnet                #
# NOTE: Run: dsc config .\dotnet-configuration.dsc.yaml                                                  #
##########################################################################################################

metadata:
  Microsoft.DSC:
    securityContext: elevated

resources:
  - name: assert-windows
    type: Microsoft.DSC/Assertion
    properties:
      $schema: https://aka.ms/dsc/schemas/v3/bundled/config/document.json
      resources:
        - name: os
          type: Microsoft/OSInfo
          properties:
            family: Windows

  - name: .NET Development Tools
    type: Microsoft.DSC/PowerShell
    properties:
      resources:
        - name: DotNetSDK8
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            Id: Microsoft.DotNet.SDK.8
            source: winget
            UseLatest: true
            Ensure: Present

        - name: VisualStudio
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            Id: Microsoft.VisualStudio.2022.Enterprise
            source: winget
            UseLatest: true
            Ensure: Present

        - name: VSComponents
          type: Microsoft.VisualStudio.DSC/VSComponents
          properties:
            productId: Microsoft.VisualStudio.Product.Enterprise
            channelId: VisualStudio.17.Release
            vsConfigFile: '${WinGetConfigRoot}\.vsconfig'
          dependsOn:
            - "[resourceId('Microsoft.WinGet.DSC/WinGetPackage','VisualStudio')]"

        - name: VisualStudioCode
          type: Microsoft.WinGet.DSC/WinGetPackage
          properties:
            Id: Microsoft.VisualStudioCode
            source: winget
            UseLatest: true
            Ensure: Present
    dependsOn:
      - "[resourceId('Microsoft.DSC/Assertion','assert-windows')]"

  - name: VisualStudioCode Extensions
    type: Microsoft.Windows/WindowsPowerShell
    properties: 
      resources:
        - name: Script to install Visual Studio Code extensions
          type: PSDesiredStateConfiguration/Script
          properties:
            GetScript: |
              # Return the currently installed VS Code extensions as a comma‚Äêseparated string.
              $installedExtensions = code --list-extensions
              return @{ Result = $installedExtensions }
            TestScript: |
              # Ignore deprecation warnings & reload path
              $env:NODE_OPTIONS="--no-deprecation"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              # Load required extensions from JSON file
              $jsonContent = Get-Content '${WinGetConfigRoot}\dotnet-configuration-vscode-extensions.json' -Raw
              $extensions = (ConvertFrom-Json $jsonContent).extensions

              # Get the list of currently installed extensions
              $installedExtensions = code --list-extensions

              # Check if all required extensions are installed
              $allInstalled = $extensions.name | ForEach-Object { $_ -in $installedExtensions }

              return $allInstalled -contains $false -eq $false
            SetScript: |
              # Ignore deprecation warnings & reload path
              $env:NODE_OPTIONS="--no-deprecation"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              # Load required extensions from JSON file
              $jsonContent = Get-Content '${WinGetConfigRoot}\dotnet-configuration-vscode-extensions.json' -Raw
              $extensions = (ConvertFrom-Json $jsonContent).extensions

              # Get the list of currently installed extensions
              $installedExtensions = code --list-extensions

              # Install each extension if not already installed
              foreach ($extension in $extensions) {
                if ($installedExtensions -notcontains $extension.name) {
                  code --install-extension $extension.name
                }
              }
    dependsOn:
      - "[resourceId('Microsoft.DSC/Assertion','assert-windows')]"
      - "[resourceId('Microsoft.WinGet.DSC/WinGetPackage','VisualStudioCode')]"

  - name: DotNetTools
    type: Microsoft.Windows/WindowsPowerShell
    properties: 
      resources:
        - name: Script to manage .NET tools installation
          type: PSDesiredStateConfiguration/Script
          properties:
            GetScript: |
              # Return currently installed .NET tools
              $installedTools = dotnet tool list -g | Select-Object -Skip 2 | ForEach-Object { ($_ -split '\s+')[0] }
              return @{ Result = $installedTools -join ',' }
            TestScript: |
              # Load required tools from JSON file
              $jsonContent = Get-Content '${WinGetConfigRoot}\dotnet-tools-configuration.json' -Raw
              $requiredTools = (ConvertFrom-Json $jsonContent).tools.id

              # Get the list of currently installed global tools
              $installedTools = dotnet tool list -g | Select-Object -Skip 2 | ForEach-Object { ($_ -split '\s+')[0] }

              # Check if all required tools are installed
              $allInstalled = $true
              foreach ($toolId in $requiredTools) {
                if (-not ($installedTools -contains $toolId)) {
                  $allInstalled = $false
                  break
                }
              }

              return $allInstalled
            SetScript: |
              # Load required tools from JSON file
              $jsonContent = Get-Content '${WinGetConfigRoot}\dotnet-tools-configuration.json' -Raw
              $tools = (ConvertFrom-Json $jsonContent).tools

              # Get the list of currently installed global tools by parsing the first column
              $installedTools = dotnet tool list -g | Select-Object -Skip 2 | ForEach-Object { ($_ -split '\s+')[0] }

              foreach ($tool in $tools) {
                $toolId = $tool.id
                $toolVersion = $tool.version

                # Install the tool if it is not already installed
                if (-not ($installedTools -contains $toolId)) {
                  $installCommand = "dotnet tool install -g $toolId"
                  if ($toolVersion -ne "latest") {
                    $installCommand += " --version $toolVersion"
                  }

                  Invoke-Expression $installCommand
                }
              }
    dependsOn:
      - "[resourceId('Microsoft.DSC/Assertion','assert-windows')]"
      - "[resourceId('Microsoft.WinGet.DSC/WinGetPackage','DotNetSDK8')]"